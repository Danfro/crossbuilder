#!/bin/sh

# Copyright 2016 Canonical Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
 

# TODO:
# - detect local architecture instead of hardcoding it
# - stop if source package build fails
# - support listing specific packages to deploy
# - support specifying target architecture
# - support depending on non sdk lxd images
# - support building multiple projects that depend on each other

# - make it faster: bypass apt update
# - implement a 'make install' version
# - figure out the subuids for lxd
# - script lxd on zfs install
# - check if a newer version of the container's image is available
# - option to cleanup device (undeploy)

RED='\033[0;31m'
GREEN='\033[0;32m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
NC='\033[0m'
ERROR_COLOR=$LIGHT_RED
POSITIVE_COLOR=$GREEN

display_help () {
    echo "Usage: `basename $0` [command]"
    echo "Available commands:"
    echo "    help          - Display this help."
    echo "    new           - Create a container to build in."
    echo "    delete        - Delete a container."
#    echo "    list          - List existing containers."
    echo "    shell         - Executes a shell in a container."
    echo "    dependencies  - Download and install the dependencies of a package."
    echo "    build         - Build a package."
    echo "    clean         - Clean up the artifacts generated by a build."
    echo "    deploy        - Deploy a built package to a connected device."
#    echo "    undeploy      - Remove previously deployed packages from a connected device."
#    echo ""
#    echo "Options:"
#    echo "  --verbose       - Print verbose information."
}


exec_device () {
    #echo adb shell "$@"
    adb shell "$@"
}

exec_container_root () {
    command="$@"
    #echo lxc exec $LXD_CONTAINER "$@"
    lxc exec $LXD_CONTAINER -- sh -c "$command"
}

exec_container () {
    command="$@"
    #echo lxc exec $LXD_CONTAINER "$@"
    lxc exec $LXD_CONTAINER -- su -c "cd $MOUNT_POINT; $command" $USERNAME
}

variables () {
    PACKAGES_TO_DEPLOY=$@
    HOST_ARCH=amd64
    TARGET_ARCH=armhf
    # FIXME: abort if no changelog is present
    PACKAGE=`dpkg-parsechangelog --show-field Source`
    #PACKAGE=`basename $PWD` # TODO: support non deb
    PACKAGE_VERSION=`dpkg-parsechangelog --show-field Version`
    if [ -z "$PACKAGES_TO_DEPLOY" ] ; then
        NEW_PACKAGE_VERSION=$PACKAGE_VERSION"local~"`date +%s`
    else
        NEW_PACKAGE_VERSION=$PACKAGE_VERSION
    fi;
    LXD_CONTAINER=$PACKAGE-$TARGET_ARCH-builder
    TARGET_UBUNTU=15.04
    LXD_IMAGE=ubuntu-sdk-$TARGET_UBUNTU-$HOST_ARCH-$TARGET_ARCH-dev
    DEVICE_PASSWORD=0000
    USERNAME=`id --user --name`
    GROUPNAME=$USERNAME
    USERID=150000
    GROUPID=150000
    USERDIR=/home/$USERNAME
    MOUNT_POINT=$USERDIR/$PACKAGE
    SCRIPT_DIR=`dirname $0`
    DEBS_TARBALL=built_debs.tar
    CREATE_REPO_SCRIPT=create_repository.sh
    PARALLEL_BUILD=$((`nproc` + 1))
}

new_container () {
    # setup the building container
    lxc info $LXD_CONTAINER > /dev/null 2>&1
    CONTAINER_EXISTS=$?
    if [ $CONTAINER_EXISTS -eq 0 ] ; then
        echo "${POSITIVE_COLOR}LXD container $LXD_CONTAINER already exists.${NC}"
        # FIXME: check if the container is already started
        lxc start $LXD_CONTAINER
    else
        echo "${POSITIVE_COLOR}Creating LXD container $LXD_CONTAINER using $LXD_IMAGE.${NC}"
        lxc remote --protocol=simplestreams --public=true --accept-certificate=true add sdk https://sdk-images.canonical.com
        lxc init sdk:$LXD_IMAGE $LXD_CONTAINER
        printf "lxc.id_map = g $GROUPID `id --group` 1\nlxc.id_map = u $USERID `id --user` 1" | lxc config set $LXD_CONTAINER raw.lxc -
        lxc start $LXD_CONTAINER
        lxc exec --env GROUPID=$GROUPID --env GROUPNAME=$GROUPNAME $LXD_CONTAINER -- addgroup --gid $GROUPID $GROUPNAME
        lxc exec --env GROUPID=$GROUPID --env USERNAME=$USERNAME --env USERID=$USERID $LXD_CONTAINER -- adduser --disabled-password --gecos "" --uid $USERID --gid $GROUPID $USERNAME
        lxc exec --env USERNAME=$USERNAME $LXD_CONTAINER -- usermod -aG sudo $USERNAME
        exec_container_root "echo 'export PATH=/usr/lib/ccache:\$PATH' >> /etc/bash.bashrc"
    fi
    echo "${POSITIVE_COLOR}Mounting $PWD in container.${NC}"
    # FIXME: check if device exists already
    # FIXME: better name than 'mymount'
    lxc config device add $LXD_CONTAINER mymount disk source=$PWD path=$MOUNT_POINT
}

delete_container () {
    echo "${POSITIVE_COLOR}Deleting LXD container $LXD_CONTAINER.${NC}"
    lxc delete -f $LXD_CONTAINER
}

shell_container () {
    echo "${POSITIVE_COLOR}Entering shell in LXD container $LXD_CONTAINER.${NC}"
    lxc exec $LXD_CONTAINER bash
}

install_dependencies () {
    exec_container [ -x debian/bileto_pre_release_hook ] && ./debian/bileto_pre_release_hook

    # install build dependencies in container
    exec_container test -e $USERDIR/dependencies_installed
    DEPS_INSTALLED=$?
    if [ $DEPS_INSTALLED -ne 0 ] ; then
        echo "${POSITIVE_COLOR}Installing $TARGET_ARCH build dependencies for $PACKAGE in container $LXD_CONTAINER.${NC}"       
        exec_container_root apt install -y debhelper ccache
        if [ $? -ne 0 ] ; then exit 1; fi;

        lxc file push $SCRIPT_DIR/$CREATE_REPO_SCRIPT $LXD_CONTAINER$USERDIR/

        exec_container cp debian/changelog debian/changelog.orig
        dch -v $NEW_PACKAGE_VERSION \'\'
        exec_container dpkg-buildpackage -S -nc -I -Iobj-* -Idebian/tmp/*
        exec_container $USERDIR/$CREATE_REPO_SCRIPT $USERDIR
        exec_container_root add-apt-repository --enable-source \"deb file://$USERDIR/ /\"
        exec_container_root apt update
        exec_container_root apt-get build-dep -y -a$TARGET_ARCH $PACKAGE
        INSTALL_DEPS_SUCCESS=$?
        exec_container mv debian/changelog.orig debian/changelog
        if [ $INSTALL_DEPS_SUCCESS -ne 0 ] ; then exit; fi;

        # workaround various issues with qmake cross compilation
        exec_container_root "printf '/usr/lib/x86_64-linux-gnu/qt5/arm-linux-gnueabihf/bin\n/usr/lib/x86_64-linux-gnu/qt5/bin\n/usr/lib/x86_64-linux-gnu\n' > /usr/share/qtchooser/qt5-x86_64-linux-gnu-arm-linux-gnueabihf.conf"
        exec_container_root ln -s ../../../share/qtchooser/qt5-x86_64-linux-gnu-arm-linux-gnueabihf.conf /usr/lib/x86_64-linux-gnu/qtchooser/qt5-arm-linux-gnueabihf.conf
        exec_container_root ln -s ../../../share/qtchooser/qt5-x86_64-linux-gnu-arm-linux-gnueabihf.conf /usr/lib/x86_64-linux-gnu/qtchooser/5-arm-linux-gnueabihf.conf
        exec_container_root mkdir -p /usr/lib/x86_64-linux-gnu/qt5/arm-linux-gnueabihf/bin
        exec_container_root ln /usr/bin/qt5-qmake-arm-linux-gnueabihf /usr/lib/x86_64-linux-gnu/qt5/arm-linux-gnueabihf/bin/qmake

        exec_container touch $USERDIR/dependencies_installed
    else
        echo "${POSITIVE_COLOR}$TARGET_ARCH build dependencies for $PACKAGE already installed in container $LXD_CONTAINER.${NC}"
    fi;
}

build () {
    # build package in container
    echo "${POSITIVE_COLOR}Building $PACKAGE for $TARGET_ARCH in parallel (-j$PARALLEL_BUILD).${NC}"
    exec_container rm ../*.deb
    exec_container rm debian/*.debhelper.log
    exec_container cp debian/changelog debian/changelog.orig

    dch -v $NEW_PACKAGE_VERSION \'\'
    exec_container DEB_BUILD_OPTIONS=\'parallel=$PARALLEL_BUILD nostrip\' dpkg-buildpackage -a$TARGET_ARCH -us -uc -nc -I -Iobj-* -Idebian/tmp/* -b
    BUILD_SUCCESS=$?
    exec_container mv debian/changelog.orig debian/changelog
    if [ $BUILD_SUCCESS -ne 0 ] ; then exit; fi;

    # transfer resulting debian packages to local machine
    echo "${POSITIVE_COLOR}Packing build artifacts in $DEB_TARBALL.${NC}"
    exec_container tar cf ../$DEBS_TARBALL ../*.deb
    lxc file pull $LXD_CONTAINER$USERDIR/$DEBS_TARBALL .
}

clean () {
    echo "${POSITIVE_COLOR}Cleaning previous build of $PACKAGE for $TARGET_ARCH.${NC}"
    debian/rules clean
}

deploy_to_device () {
    DEVICE_STATE=`adb get-state`
    if [ $DEVICE_STATE != "device" ] ; then
        echo "${ERROR_COLOR}No device connected to deploy to.${NC}"
        exit 1
    fi;
    echo "${POSITIVE_COLOR}Transferring build artifacts to device.${NC}"
    # tranfer debian packages to device
    exec_device "printf '#\041/bin/sh\necho $DEVICE_PASSWORD' >/tmp/askpass.sh"
    exec_device chmod +x /tmp/askpass.sh
    exec_device SUDO_ASKPASS=/tmp/askpass.sh sudo -A mount -o remount,rw /
    exec_device mkdir -p /tmp/repo
    adb push $DEBS_TARBALL /tmp/repo/
    exec_device "cd /tmp/repo && tar xvf /tmp/repo/$DEBS_TARBALL && rm /tmp/repo/$DEBS_TARBALL"

    # install debian packages on device
    if [ ! -z "$PACKAGES_TO_DEPLOY" ] ; then
        echo "${POSITIVE_COLOR}Installing manually specified packages:" $PACKAGES_TO_DEPLOY${NC}
        DPKG_ARGS=""
        for package in $PACKAGES_TO_DEPLOY ; do
            DPKG_ARGS="$DPKG_ARGS /tmp/repo/$package"_"$NEW_PACKAGE_VERSION"_"$TARGET_ARCH.deb"
        done
        exec_device SUDO_ASKPASS=/tmp/askpass.sh sudo -A dpkg -i $DPKG_ARGS 
    else
        echo "${POSITIVE_COLOR}Upgrading packages already installed on device with newly built ones.${NC}"
        # create local deb repository on device
        adb pull /tmp/repo/$CREATE_REPO_SCRIPT
        REPO_SETUP=$?
        rm $CREATE_REPO_SCRIPT
        if [ $REPO_SETUP -ne 0 ] ; then
            adb push $SCRIPT_DIR/$CREATE_REPO_SCRIPT /tmp/repo/
            exec_device /tmp/repo/$CREATE_REPO_SCRIPT /tmp/repo
            exec_device SUDO_ASKPASS=/tmp/askpass.sh sudo -A add-apt-repository -y "deb file:///tmp/repo/ /"
            SERIES=$(adb shell lsb_release -cs | tr -d '\r')
            exec_device "printf 'Package: *\nPin: release o=local\nPin-Priority: 2000\n\nPackage: *\nPin: release a=$SERIES*\nPin-Priority: 50' | SUDO_ASKPASS=/tmp/askpass.sh sudo -A tee /etc/apt/preferences.d/localrepo.pref"
        else
            exec_device /tmp/repo/$CREATE_REPO_SCRIPT /tmp/repo
        fi;

        exec_device "SUDO_ASKPASS=/tmp/askpass.sh sudo -A sed -i '/Pin-Priority/c\Pin-Priority: 50' /etc/apt/preferences.d/extra-ppas.pref"
        exec_device SUDO_ASKPASS=/tmp/askpass.sh sudo -A apt-get update
        exec_device SUDO_ASKPASS=/tmp/askpass.sh sudo -A apt-get dist-upgrade --yes --force-yes
        exec_device "SUDO_ASKPASS=/tmp/askpass.sh sudo -A sed -i '/Pin-Priority/c\Pin-Priority: 1001' /etc/apt/preferences.d/extra-ppas.pref"
    fi;
}

ARGUMENTS=$@
if [ -z "$ARGUMENTS" ] ; then
    variables
    echo "${POSITIVE_COLOR}Building $PACKAGE for $TARGET_ARCH and deploying to device.${NC}"
    new_container
    install_dependencies
    build
    deploy_to_device
else
    COMMAND=$1
    case "$COMMAND" in
        help)
            display_help
            exit 0
        ;;
        new)
            variables
            new_container
        ;;
        delete)
            variables
            delete_container
        ;;
        shell)
            variables
            shell_container
        ;;
        dependencies)
            variables
            install_dependencies
        ;;
        build)
            variables
            build
        ;;
        clean)
            variables
            clean
        ;;
        deploy)
            variables
            deploy_to_device
        ;;
        *)
            display_help
            echo ""
            echo "${ERROR_COLOR}error: unknown command: $COMMAND${NC}"
            exit 1
        ;;
    esac
fi;
